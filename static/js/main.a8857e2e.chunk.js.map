{"version":3,"sources":["containers/Form.js","components/Card.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Form","cbAddUser","cbHideForm","cbChengeUser","typeBtn","selectedName","selectedPhone","useFormik","initialValues","name","phone","validationSchema","Yup","min","required","onSubmit","handleSubmit","handleChange","values","touched","errors","handleBlur","toUpperCase","className","type","id","placeholder","onChange","onBlur","value","onClick","Card","cbEdit","editing","cbRemove","disabled","data","App","useState","users","setUsers","showForm","setShowForm","setEditing","setTypeBtn","selectedId","setSelecterId","setSelectedName","setSelectedPhone","removeUser","filter","user","hideForm","clickHandler","forEach","item","Date","parse","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8857e2e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nfunction Form({\r\n    cbAddUser,\r\n    cbHideForm,\r\n    cbChengeUser,\r\n    typeBtn,\r\n    selectedName,\r\n    selectedPhone }) {\r\n\r\n    const { handleSubmit, handleChange, values, touched, errors, handleBlur } = useFormik({\r\n        initialValues: {\r\n            name: selectedName,\r\n            phone: selectedPhone\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string().min(3, '*Min 3 characters').required('*Add name'),\r\n            phone: Yup.string().min(6, 'Min 6 characters').required('*Add phone')\r\n        }),\r\n        onSubmit: ({ name, phone }) => {\r\n            typeBtn === 'add'\r\n                ? cbAddUser(name, phone)\r\n                : cbChengeUser(name, phone)\r\n        }\r\n    })\r\n    return (\r\n        <>\r\n            <h1> {(typeBtn).toUpperCase()} USER</h1>\r\n            <div className='form-wrap'>\r\n                <form className='form' onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        id='name'\r\n                        className='form-item'\r\n                        placeholder='user name'\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.name}\r\n                    />\r\n                    {touched.name && errors.name\r\n                        ? <div className='form-left'>{errors.name}</div>\r\n                        : null}\r\n                    <input\r\n                        type=\"text\"\r\n                        id='phone'\r\n                        className='form-item'\r\n                        placeholder='user phone'\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.phone}\r\n                    />\r\n                    {touched.phone && errors.phone\r\n                        ? <div className='form-right'>{errors.phone}</div>\r\n                        : null}\r\n                    <button type='submit' className='form-button'>{typeBtn}</button>\r\n                </form>\r\n                <button onClick={cbHideForm} className='form-button'>cancel</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport { Form }","function Card({ id, name, phone, cbEdit, editing, cbRemove }) {\r\n    return (\r\n        <>\r\n            <div className='card'>\r\n                <div className='card-item'>{name}</div>\r\n                <div className='card-item'>{phone}</div>\r\n                <div className='card-item'>\r\n                    <button \r\n                    disabled={editing} \r\n                    onClick={() => cbEdit(id)}>Edit</button>\r\n                    <button onClick={() => cbRemove(id)}>Delete</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport { Card };","import React, { useState } from 'react'\nimport { Form } from './Form'\nimport { Card } from '../components/Card'\n\nconst data = [\n  { id: '0', name: 'alex', phone: '097733777' },\n  { id: '1', name: 'anna', phone: '092227771' },\n  { id: '3', name: 'marina', phone: '090002221' }\n]\n\nfunction App() {\n  const [users, setUsers] = useState(data);\n  const [showForm, setShowForm] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const [typeBtn, setTypeBtn] = useState('add'); //edit\n  const [selectedId, setSelecterId] = useState('');\n  const [selectedName, setSelectedName] = useState('');\n  const [selectedPhone, setSelectedPhone] = useState('');\n\n  function addUser(name, phone) {\n    let id = Date.parse(new Date());\n    setUsers([...users, { id, name, phone }]);\n    hideForm();\n  }\n\n  function removeUser(id) {\n    setUsers(users.filter(user => user.id !== id))\n  }\n\n  function chengeUser(name, phone) {\n    setUsers(users.map(item => item.id === selectedId ? { ...item, name, phone } : item));\n    hideForm();\n  }\n\n  function hideForm() {\n    setShowForm(false);\n    setEditing(false);\n    setSelectedName('');\n    setSelectedPhone('');\n  }\n\n  function cbEdit(id) {\n    clickHandler('edit');\n\n    users.forEach(item => {\n      if (item.id === id) {\n        setSelectedName(item.name);\n        setSelectedPhone(item.phone);\n        setSelecterId(id);\n      }\n    });\n  }\n\n  function clickHandler(type) {\n    setShowForm(true);\n    setEditing(true);\n    setTypeBtn(type);\n  }\n\n  return (\n    <div className='container'>\n      <div className=\"header\">\n        {showForm\n          ? <Form\n            cbAddUser={addUser}\n            cbHideForm={hideForm}\n            cbChengeUser={chengeUser}\n            typeBtn={typeBtn}\n            selectedName={selectedName}\n            selectedPhone={selectedPhone}\n          />\n          : <button className='form-button' onClick={() => clickHandler('add')}> Add User</button>\n        }\n      </div>\n\n      {users.map(item => (\n        <Card\n          key={item.id}\n          cbEdit={cbEdit}\n          cbRemove={removeUser}\n          editing={editing}\n          {...item}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}